<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mes.bf.prod.mapper.InstructionMapper">


	<resultMap type="com.mes.bf.cmn.vo.EmpVO" id="EmpMap">
		<id property="deptNo" column="dept_no" />
		<id property="empName" column="emp_name" />
		<id property="empAuth" column="emp_auth" />
		<id property="empEmail" column="emp_email" />
		<id property="empId" column="emp_id" />
		<id property="empPw" column="emp_pw" />
		<id property="phone" column="phone" />
	</resultMap>


	<resultMap type="com.mes.bf.cmn.vo.DeptVO" id="DeptMap">
		<id property="deptNo" column="dept_no" />
		<id property="deptName" column="dept_name" />
	</resultMap>

	<resultMap type="com.mes.bf.prod.vo.FindEmpVO" id="FindEmpVO">
		<collection property="empvo" resultMap="EmpMap" />
		<collection property="deptvo" resultMap="DeptMap" />

	</resultMap>



	<select id="findEmp" resultMap="FindEmpVO">

		SELECT *
		FROM BF_CMN_EMP e 
		JOIN bf_cmn_dept d
		  ON e.dept_no = d.dept_no
		<where>
			<if test="empName != null and empName !=''">
				AND LOWER(e.emp_name) LIKE '%'||#{empName}||'%'
			</if>
		</where>

	</select>

	<!-- 완제품코드 검색 -->

	<select id="findProdName" resultType="VFindProdANdLineVO">

		SELECT * FROM
		v_findprodandline
		WHERE fin_prd_cd_code = #{prodCode}

	</select>

	<!-- 완제품 조회 -->

	<select id="findProduct" resultType="prodCode">

		SELECT * 
		  FROM BF_CMN_FINISH_PRODUCT_CODE
		<where>
			<if test="prdCdCode != null and prdCdCode !=''">
				AND fin_prd_cd_code LIKE '%'||#{prdCdCode}||'%'
			</if>
	
			<if test="prdCdName != null and prdCdName !=''">
				AND fin_prd_cd_name LIKE '%'||#{prdCdName}||'%'
			</if>
		</where>
	ORDER BY FIN_PRD_CD_CODE

	</select>

	<!--생산지시조회 -->
	<select id="findVInstruction" resultType="vinst">

		SELECT * FROM v_instruction
<!-- instdate 날짜 타입 to_char 수정 -->
		<where>
			<if test="instSdate != null and instSdate !=''">
				<![CDATA[ AND TO_CHAR(instdate, 'yyyy-MM-dd') >= #{instSdate} ]]>
			</if>

			<if test="instEdate != null and instEdate !='' ">
				 <![CDATA[ AND TO_CHAR(instdate, 'yyyy-MM-dd') <= #{instEdate} ]]>
			</if>

			<if test="vendorName != null and vendorName != ''">
				AND vendcdnm = #{vendorName}
			</if>
			<if test="productName != null and productName != ''">
				AND finPrdCdName = #{productName}
			</if>
			<if test="workScope != null and workScope != ''">
				AND workscope = #{workScope}
			</if>
		</where>

	</select>

	<!-- 거래처조회 -->
	<select id="findVendorCode" resultType="vendorCode">
		SELECT * FROM BF_CMN_VENDOR_CODE
		<where>
			<if test="vendorCode != null and vendorCode != ''">
				AND vend_cd_code LIKE '%'||#{vendorCode}||'%'
			</if>
			<if
				test="vendCdClfy != null and vendCdClfy != '' and vendCdClfy != '전체'">
				AND vend_cd_clfy LIKE '%'||#{vendCdClfy}||'%'
			</if>
		</where>
		ORDER BY VEND_CD_CODE
	</select>

	<!-- 공정상태조회 -->
	<select id="findProcStatus" resultType="findProcStatusVO" parameterType="java.util.List">

		SELECT
			linecode.line_cd_ord AS lineCdOrd,
			proccode.proc_cd_name AS procCdName,
			eqp.mchn_name AS mchnName,
			eqp.mchn_stts AS mchnStts
		FROM
			BF_CMN_LINE_CODE linecode,
			BF_CMN_PROC_CODE proccode,
			BF_EQP_MCHN eqp,
			BF_CMN_LINE_CODE_HD linecodehd
		WHERE 
			linecode.proc_cd_code =
			proccode.proc_cd_code 
		AND
			linecode.mchn_code = 
			eqp.mchn_code 
		AND
			linecode.line_cd_hd_code =
			linecodehd.line_cd_hd_code
		AND
		line_cd_hd_name IN
		<foreach collection="list" open="(" separator="," close=")" item="item">
			#{item}
		</foreach>
		
		ORDER BY linecode.line_cd_hd_code,1

	</select>

	<!-- 라인별 자재 소요 예상량 조회 -->
	<select id="findVRscNeedQty" resultType="com.mes.bf.prod.vo.VRscNeedQtyVO" 
	parameterType="java.util.List">
	
	SELECT
			rsccdcode,
			rsccdname,
			rscstock,
			rsccdunit,
			rscusevol,
			finprdcdcode
	FROM 
		V_RSC_NEED_QTY
	WHERE 
		finPrdCdCode 
	IN
		<foreach collection="list" open="(" separator="," close=")" item="item">
			#{item}
		</foreach>
	ORDER BY 6,1
	</select>

	<!-- 생산지시 헤더 입력 -->

	<insert id="insertInstruction">

		INSERT INTO
			BF_PROD_INSTRUCTION(
								inst_no,
								emp_id,
								inst_name,
								inst_date,
								inst_remk,
								plan_hd_code
								)
		VALUES(
				BF_PROD_INSTRUCTION_SEQ.nextval,
				(
				SELECT 
					emp_id 
				FROM 
					BF_CMN_EMP
				WHERE 
					emp_name = #{empId}
				),
				#{instName},
				#{instDate},
				#{instRemk},
				#{planHdCode}
				)

	</insert>
	
	<!-- 생산지시 통합 상세 입력 -->
	<insert id="insertInstructionDetailList">
		<selectKey keyProperty="instNo" order="BEFORE"
			resultType="int">
			SELECT MAX(inst_no) FROM BF_PROD_INSTRUCTION
		</selectKey>
		INSERT INTO
			BF_PROD_INST_DETAIL(
								inst_prod_no,
								fin_prd_cd_code,
								inst_no,
								inst_prod_indica_vol,
								work_scope,
								work_date
								)
		VALUES(
				BF_PROD_INST_DETAIL_SEQ.nextval,
				#{finPrdCdCode},
				#{instNo},
				#{instProdIndicaVol},
				'진행전',
				#{workDate}
				)
	</insert>

	<!-- 공정테이블 데이터 입력 -->

	<insert id="insertProc">
		INSERT INTO
		bf_prod_process (
							process_no,
							inst_prod_no,
							process_order,
							proc_cd_code,
							proc_cd_name,
							mchn_code,
							mchn_name
						)
		SELECT
				BF_PROD_PROCESS_SEQ.nextval,
				(SELECT MAX(inst_prod_no) 
				   FROM	BF_PROD_INST_DETAIL),
				linecode.line_cd_ord,
				linecode.proc_cd_code,
				proccode.proc_cd_name,
				linecode.mchn_code,
				eqp.mchn_name
		FROM
			BF_CMN_PROC_CODE proccode,
			BF_CMN_LINE_CODE linecode,
			BF_EQP_MCHN eqp,
			BF_CMN_LINE_CODE_HD linecodehd,
			BF_CMN_BOM_CODE bomcode
		WHERE
			proccode.proc_cd_code = linecode.proc_cd_code
		AND
			eqp.mchn_code = linecode.mchn_code
		AND
			linecodehd.line_cd_hd_code = linecode.line_cd_hd_code
		AND
			linecodehd.line_cd_hd_code = bomcode.line_cd_hd_code
		AND
			bomcode.fin_prd_cd_code = #{finPrdCdCode}

	</insert>

	<!-- 자재소요예상량 데이터입력 -->
	<insert id="insertNeedQty">
	INSERT INTO 
		BF_PROD_RSC_NEED_QTY (
								inst_prod_no,
			                    rsc_cd_code,
								rsc_cd_name,
								rsc_stock,
			                    rsc_cd_unit,
								rsc_need_qty,
								fin_prd_cd_code
							  )
	SELECT (
			SELECT MAX(inst_prod_no) 
			FROM BF_PROD_INST_DETAIL
			),
	        rsccdcode,
	        rsccdname,
	        rscstock,
	        rsccdunit,
	        rscusevol,
	        finprdcdcode 
	FROM 
		V_RSC_NEED_QTY
	WHERE 
		finprdcdcode = #{finPrdCdCode}

	</insert>
	
	<!-- 자재소요예상량 업데이트 -->
	<update id="updateNeedQty">
		UPDATE 
			BF_PROD_RSC_NEED_QTY 
		SET 
			RSC_NEED_QTY = #{needQty}
		WHERE 
			inst_prod_no = (SELECT 
								MAX(inst_prod_no) 
							FROM 
								BF_PROD_INST_DETAIL)
		AND RSC_CD_CODE = #{rscCdCode}
		
	</update>
	
	<!-- 최초공정 입고량업데이트 -->
	<update id="updateinDtlVol">
		 UPDATE 
		 	BF_PROD_PROCESS 
		 SET 
		 	in_dtl_vol = #{indicaVol}
		 WHERE 
		 	inst_prod_no = (SELECT MAX(inst_prod_no)
		 				   FROM BF_PROD_INST_DETAIL)
		 AND 
		 	process_order = 1
	
	</update>
	
	
	<!-- 생산지시 업데이트 -->
	
	<update id="updateInst">
	
	
	</update>
	
	<!-- 생산지시 헤더 조회 -->
	<select id="getInst" resultType="instructionVO">
		SELECT 
			inst_no,
			emp_id,
			inst_name,
			inst_date,
			inst_remk,
			plan_hd_code
		FROM 
			BF_PROD_INSTRUCTION 
		WHERE inst_no = #{instNo}
	</select>
	
	<!-- 직원 아이디로 직원 이름 찾기 -->
	<select id="getEmpName" resultType="emp">
		SELECT 
			emp_name 
		FROM 
			BF_CMN_EMP
		WHERE emp_id = #{empId}
	</select>
	<!-- 생산지시 헤더 업데이트 -->
	<update id="updateInstHeader">
		UPDATE 
			BF_PROD_INSTRUCTION
		SET
			emp_id = (
						SELECT 
							emp_id 
						FROM 
							BF_CMN_EMP 
						WHERE 
							emp_name = #{empId}
					),
			inst_name = #{instName},
			inst_date = #{instDate},
			inst_remk = #{instRemk}
		WHERE
			inst_no = #{instNo} 
	
	</update>
	
	
	<!-- 생산지시 디테일 업데이트 -->
	
	<update id="updateInstDetail">
		UPDATE
			BF_PROD_INST_DETAIL
		SET	
			fin_prd_cd_code = #{finPrdCdCode},
			inst_prod_indica_vol = #{instProdIndicaVol},
			work_date = #{workDate}
		WHERE
			inst_prod_no = #{instProdNo}
	</update>
	
	<!-- 생산지시 삭제 -->
	<delete id="deleteInst">
		DELETE
		FROM
			BF_PROD_INST_DETAIL
		WHERE inst_prod_no = #{instProdNo}
	</delete>
	
	<!-- 생산지시 헤더 조회 -->
	<select id="findInst" resultType="com.mes.bf.prod.vo.InstructionVO">
	
		SELECT 
			inst.inst_no AS instNo, 
			inst.emp_id AS empId,
			inst.inst_name AS instName,
			inst.inst_date AS instDate,
			inst.inst_remk AS instRemk,
			NVL(inst.plan_hd_code, '') AS planHdCode,
			detail.work_scope AS workScope
		FROM 
			BF_PROD_INSTRUCTION inst,
            BF_PROD_INST_DETAIL detail
        WHERE 
        	inst.inst_no = detail.inst_no
       		<if test="instSdate != null and instSdate !=''">
				<![CDATA[ AND TO_CHAR(inst.inst_date, 'yyyy-MM-dd') >= #{instSdate} ]]>
			</if>

			<if test="instEdate != null and instEdate !='' ">
				 <![CDATA[ AND TO_CHAR(inst.inst_date, 'yyyy-MM-dd') <= #{instEdate} ]]>
			</if>
        	
        AND
        	detail.work_scope = '진행전'
		GROUP BY  
			inst.inst_no, 
			inst.emp_id,
			inst.inst_name,
			inst.inst_date,
			inst.inst_remk,
			inst.plan_hd_code,
			detail.work_scope
		ORDER BY inst.inst_no
	</select>
	
	<select id="findNotInProcInst" resultType="com.mes.bf.prod.vo.NotInProcInstVO">
	SELECT id.fin_prd_cd_code,
            p.plan_idx,
            ph.plan_hd_code,
            p.plan_sdate,
            p.plan_edate,
            id.inst_prod_indica_vol,
            p.plan_prod_vol,
            id.work_date,
            id.inst_prod_no
	FROM 
		BF_PROD_INSTRUCTION I
	JOIN 
		BF_PROD_INST_DETAIL ID
	ON I.INST_NO = ID.INST_NO
	LEFT OUTER JOIN 
				BF_PROD_PLAN_HD PH
	ON PH.PLAN_HD_CODE = I.PLAN_HD_CODE	
	LEFT OUTER JOIN 
				BF_PROD_PLAN P
	ON P.FIN_PRD_CD_CODE = ID.FIN_PRD_CD_CODE
   	AND 
   		P.PLAN_HD_CODE = PH.PLAN_HD_CODE
	WHERE 
		I.INST_NO = #{instNo}
	AND 
		ID.WORK_SCOPE = '진행전'

	
	</select>
	
	<!-- 생산지시 헤더 삭제 -->
	<delete id="deleteInstHd">
		DELETE
		FROM
			BF_PROD_INSTRUCTION
		WHERE inst_no = #{instNo}
	
	</delete>
	
	
</mapper>